package com.example.flo_BBangJun

import android.content.ContentValues.TAG
import android.content.Intent
import android.media.MediaPlayer
import android.os.Bundle
import android.util.Log
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import com.example.flo_BBangJun.databinding.ActivityMainBinding
import com.google.gson.Gson

import kotlinx.android.synthetic.main.activity_main.*


class MainActivity : AppCompatActivity() {
    lateinit var binding: ActivityMainBinding
    private lateinit var song: Song


    // 미디어 플레이어
    private var mediaPlayer: MediaPlayer? = null

    // Gson
    private val gson: Gson = Gson()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        initNavigation()
        inputDummySongs()

        // 룸디비 사용구조3  _ SharedPreference로 송id(primarykey) 전달받기
        binding.mainPlayerLayout.setOnClickListener {
            Log.d("nowSongId", song.id.toString())
            val editor = getSharedPreferences("song", MODE_PRIVATE).edit() // sharedpreference로부터
            editor.putInt("songId", song.id) // song의 id 전달
            editor.apply()

            val intent = Intent(this@MainActivity, SongActivity::class.java) // songactivity로

            startActivity(intent) // activity 전환
        }
    }

    override fun onStart() { // 룸디비 사용구조2 _ id에 해당하는 song 데이터 전달
        super.onStart()

        val spf = getSharedPreferences("song", MODE_PRIVATE)
        val songId = spf.getInt("songId", 0) // shared에 저장한 값이 없어서 songid가 0으로 반환

        val songDB = SongDatabase.getInstance(this)!! // 인스턴스 가져오기
        song = if (songId == 0) {
            songDB.songDao().getSong(1) // autogenerated되는 primary key가 1이므로 getsong에 1을 default로 설정
        } else {
            songDB.songDao().getSong(songId) // song의 데이터클래스
        }

        Log.d("song ID", song.id.toString())
        setMiniPlayer(song)
    }

    private fun initNavigation() { // 바텀 네비게이션
        supportFragmentManager.beginTransaction().replace(R.id.main_frm, HomeFragment())
            .commitAllowingStateLoss()

        binding.mainBnv.setOnItemSelectedListener {
            when (it.itemId) {
                R.id.homeFragment -> {
                    supportFragmentManager.beginTransaction()
                        .replace(R.id.main_frm, HomeFragment())
                        .commitAllowingStateLoss()
                    return@setOnItemSelectedListener true
                }

                R.id.lookFragment -> {
                    supportFragmentManager.beginTransaction()
                        .replace(R.id.main_frm, LookFragment())
                        .commitAllowingStateLoss()
                    return@setOnItemSelectedListener true
                }

                R.id.searchFragment -> {
                    supportFragmentManager.beginTransaction()
                        .replace(R.id.main_frm, SearchFragment())
                        .commitAllowingStateLoss()
                    return@setOnItemSelectedListener true
                }

                R.id.lockerFragment -> {
                    supportFragmentManager.beginTransaction()
                        .replace(R.id.main_frm, LockerFragment())
                        .commitAllowingStateLoss()
                    return@setOnItemSelectedListener true
                }

            }
            false
        }
    }

    private fun setMiniPlayer(song: Song) {
        binding.mainMiniplayerTitleTv.text = song.title
        binding.mainMiniplayerSingerTv.text = song.singer
        binding.mainProgressSb.progress = (song.second * 1000 / song.playTime)

        val music = resources.getIdentifier(song.music, "raw", this.packageName)

        mediaPlayer = MediaPlayer.create(this, music)

        if (song.isPlaying) {
            binding.mainMiniplayerPauseIv.visibility = View.VISIBLE
            binding.mainMiniplayerPlayIv.visibility = View.GONE
        } else {
            binding.mainMiniplayerPauseIv.visibility = View.GONE
            binding.mainMiniplayerPlayIv.visibility = View.VISIBLE
        }
    }

//    private fun playNext(){
//        songList[nowPos].isPlaying=false
//        songList[nowPos].second=0
//
//        if(nowPos == songList.size-1)
//            nowPost=0
//        else nowPos++
//
//        player.interrupt()
//        mediaPlayer?.release()
//        mediaPlayer = nullsetPlayer(songList[nowPos])
//    }
//}



    // 룸디비 사용구조1 _ Songs 데이터 저장(ROOMDB 데이터 저장)
    private fun inputDummySongs() {
        val songDB = SongDatabase.getInstance(this)!! // 인스턴스 가져오기 (songdao사용을 위해)
        val songs = songDB.songDao().getSongs() // 테이블의 모든 값 가져오기

        if (songs.isNotEmpty()) return // songs에 이미 데이터가 있을 경우 함수 끝내기

        // song에 데이터가 없을 경우
        songDB.songDao().insert(
            Song(
                "Lilac",
                "아이유 (IU)",
                0,
                200,
                false,
                "music_lilac",
                R.drawable.img_album_exp2,
                false
            )
        )

        songDB.songDao().insert(
            Song(
                "Flu",
                "아이유 (IU)",
                0,
                200,
                false,
                "music_lilac",
                R.drawable.img_album_exp2,
                false
            )
        )

        songDB.songDao().insert(
            Song(
                "Butter",
                "방탄소년단 (BTS)",
                0,
                190,
                false,
                "music_lilac",
                R.drawable.img_album_exp,
                false
            )
        )

        songDB.songDao().insert(
            Song(
                "Butter (Hotter Remix)",
                "방탄소년단 (BTS)",
                0,
                190,
                false,
                "music_lilac",
                R.drawable.img_album_exp,
                false
            )
        )

        songDB.songDao().insert(
            Song(
                "Butter (Sweeter Remix)",
                "방탄소년단 (BTS)",
                0,
                190,
                false,
                "music_lilac",
                R.drawable.img_album_exp,
                false
            )
        )

        songDB.songDao().insert(
            Song(
                "Next Level",
                "에스파 (AESPA)",
                0,
                210,
                false,
                "music_lilac",
                R.drawable.img_album_exp3,
                false
            )
        )

        songDB.songDao().insert(
            Song(
                "Next Level (IMLAY Remix)",
                "에스파 (AESPA)",
                0,
                210,
                false,
                "music_lilac",
                R.drawable.img_album_exp3,
                false
            )
        )

        songDB.songDao().insert(
            Song(
                "Boy with Luv",
                "방탄소년단 (BTS)",
                0,
                230,
                false,
                "music_lilac",
                R.drawable.img_album_exp4,
                false
            )
        )

        songDB.songDao().insert(
            Song(
                "소우주 (Mikrokosmos)",
                "방탄소년단 (BTS)",
                0,
                230,
                false,
                "music_lilac",
                R.drawable.img_album_exp4,
                false
            )
        )

        songDB.songDao().insert(
            Song(
                "Make It Right",
                "방탄소년단 (BTS)",
                0,
                230,
                false,
                "music_lilac",
                R.drawable.img_album_exp4,
                false
            )
        )

        songDB.songDao().insert(
            Song(
                "BBoom BBoom",
                "모모랜드 (MOMOLAND)",
                0,
                240,
                false,
                "music_lilac",
                R.drawable.img_album_exp5,
                false
            )
        )

        songDB.songDao().insert(
            Song(
                "궁금해",
                "모모랜드 (MOMOLAND)",
                0,
                240,
                false,
                "music_lilac",
                R.drawable.img_album_exp5,
                false
            )
        )
        val _songs = songDB.songDao().getSongs()
        Log.d("DB DATA", _songs.toString()) // db에 데이터가 들어가 있는지 확인
    }

//    inner class Player(private val song: Song) : Thread(){
//        override fun run() {
//            try{
//                while(true){
//                    if(song.isPlaying){
//                        sleep(1000)
//                        song.second++
//
//                        if(song.second >= song.playTime){
//                            runOnUiThread {
//                                playNext()
//                            }
//                        }
//                        runOnUiThread {
//                            binding.mainProgressSb.progress=song.second*1000/song.playTime
//                        }
//                    }
//                }
//            } catch (e: InterruptedException){
//                Log.d(TAG, "쓰레드가 종료")
//            }
//        }
//    }
}